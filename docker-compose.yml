version: '3'

services:

#  web:
#    image: dck.zhuge.test/zgo
#    build:
#      context: .
#      dockerfile: Dockerfile
#    volumes:
#    environment:
#      REDIS_HOST: redis
#      MYSQL_HOST: mysql
#      MONGO_HOST: mongo
#    depends_on:
#      - redis
#      - mongo
#      - mysql
#  networks:
#        - link-network

  etcd:
    image: quay.io/coreos/etcd:v3.3.12
    networks:
      - link-network
    volumes:
      - ~/docker-data/etcd-data:/etcd-data
    ports:
      - "2381:2379"
      - "2382:2380"
    command: /usr/local/bin/etcd --name s1 --data-dir /etcd-data --listen-client-urls http://0.0.0.0:2379 --advertise-client-urls http://0.0.0.0:2379 --listen-peer-urls http://0.0.0.0:2380 --initial-advertise-peer-urls http://0.0.0.0:2380 --initial-cluster s1=http://0.0.0.0:2380 --initial-cluster-token tkn --initial-cluster-state new

#  pika-9221:
#    image: pikadb/pika
#    ports:
#      - 9221:9221
#    volumes:
#      - ~/docker-data/pika-9221:/data
#    networks:
#      - link-network

  redis-6379:
    image: redis
    ports:
      - 6379:6379
    volumes:
      - ~/docker-data/redis-6379:/data
    networks:
      - link-network

  redis-6380:
    image: redis
    ports:
      - 6380:6379
    volumes:
      - ~/docker-data/redis-6380:/data
    networks:
      - link-network

  mongo-27017:
    image: mongo
    ports:
      - 27017:27017
    volumes:
      - ~/docker-data/mongo-27017/configdb:/data/configdb
      - ~/docker-data/mongo-27017/db:/data/db
    networks:
      - link-network

  mongo-27018:
    image: mongo
    ports:
      - 27018:27017
    volumes:
      - ~/docker-data/mongo-27018/configdb:/data/configdb
      - ~/docker-data/mongo-27018/db:/data/db
    networks:
      - link-network

  mysql-3307:
    image: mysql
    ports:
      - 3307:3306
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ~/docker-data/mysql-3307:/data
    networks:
      - link-network

  mysql-3308:
    image: mysql
    ports:
      - 3308:3306
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ~/docker-data/mysql-3308:/data
    networks:
      - link-network

  nsqlookupd:
    image: nsqio/nsq
    networks:
      - link-network
    hostname: nsqlookupd
    ports:
      - "4161:4161"
      - "4160:4160"
    command: /nsqlookupd

  nsqd:
    image: nsqio/nsq
    depends_on:
      - nsqlookupd
    hostname: nsqd
    volumes:
      - ~/docker-data/nsq:/data
    networks:
      - link-network
    ports:
      - "4151:4151"
      - "4150:4150"
    command: /nsqd --broadcast-address=nsqd --lookupd-tcp-address=nsqlookupd:4160 --data-path=/data

#  nsqd2:
#    image: nsqio/nsq
#    depends_on:
#      - nsqlookupd
#    hostname: nsqd
#    volumes:
#      - ~/docker-data/nsq2:/data
#    networks:
#      - link-network
#    ports:
#      - "4153:4151"
#      - "4152:4150"
#    command: /nsqd --broadcast-address=nsqd --lookupd-tcp-address=nsqlookupd:4160 --data-path=/data

  nsqadmin:
    image: nsqio/nsq
    depends_on:
      - nsqlookupd
    hostname: nsqadmin
    ports:
      - "4171:4171"
    networks:
      - link-network
    command: /nsqadmin --lookupd-http-address=nsqlookupd:4161

  zookeeper:
    image: wurstmeister/zookeeper
    restart: unless-stopped
    hostname: zookeeper
    ports:
      - "2181:2181"
    container_name: zookeeper
    networks:
      - link-network

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "stream-in:1:1,stream-out:1:1"
    depends_on:
      - zookeeper
    container_name: kafka
    networks:
      - link-network

networks:
  link-network:
    driver: bridge